name: Deploy to Azure Static Web Apps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests during deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
  REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
  REACT_APP_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        lfs: false

    # Setup Node.js with caching
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    # Load environment configuration
    - name: Load Environment Config
      run: |
        if [ -f "config/azure-static-webapp-config.json" ]; then
          echo "Loading environment configuration..."
          cat config/azure-static-webapp-config.json | jq -r '.environments.${{ env.REACT_APP_ENVIRONMENT }} | to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
        fi

    # Install dependencies with retry mechanism
    - name: Install Dependencies
      run: |
        for i in {1..3}; do
          npm ci --prefer-offline --no-audit && break
          echo "Attempt $i failed, retrying..."
          sleep 5
        done

    # Run tests unless skipped
    - name: Run Tests
      if: github.event.inputs.skip_tests != 'true'
      run: |
        npm run test -- --coverage --watchAll=false --passWithNoTests
        echo "Test coverage report generated"

    # Security audit
    - name: Security Audit
      run: |
        npm audit --audit-level=moderate
        echo "Security audit completed"

    # Build application
    - name: Build Application
      run: |
        echo "Building for environment: ${{ env.REACT_APP_ENVIRONMENT }}"
        npm run build
        
        # Verify build output
        if [ ! -d "build" ]; then
          echo "Build directory not found!"
          exit 1
        fi
        
        echo "Build size analysis:"
        du -sh build/*

    # Upload build artifacts
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ env.REACT_APP_ENVIRONMENT }}-${{ github.sha }}
        path: |
          build/
          !build/**/*.map
        retention-days: 30

    # Deploy to Azure Static Web Apps
    - name: Deploy to Azure Static Web Apps
      id: builddeploy
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/"
        api_location: ""
        output_location: "build"
        config_file_location: "config"
        deployment_environment: ${{ env.REACT_APP_ENVIRONMENT }}
        
    # Post-deployment verification
    - name: Post-Deployment Health Check
      if: steps.builddeploy.outcome == 'success'
      run: |
        echo "Deployment URL: ${{ steps.builddeploy.outputs.static_web_app_url }}"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Basic health check
        if curl -f -s "${{ steps.builddeploy.outputs.static_web_app_url }}" > /dev/null; then
          echo "✅ Application is responding successfully"
        else
          echo "❌ Application health check failed"
          exit 1
        fi

    # Notify teams on success
    - name: Notify Success
      if: success()
      run: |
        chmod +x scripts/notify-teams.sh
        ./scripts/notify-teams.sh "success" "${{ env.REACT_APP_ENVIRONMENT }}" "${{ steps.builddeploy.outputs.static_web_app_url }}"

    # Notify teams on failure
    - name: Notify Failure
      if: failure()
      run: |
        chmod +x scripts/notify-teams.sh
        ./scripts/notify-teams.sh "failure" "${{ env.REACT_APP_ENVIRONMENT }}" ""

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
    - name: Close Pull Request
      id: closepullrequest
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        action: "close"

  performance_monitoring:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build_and_deploy_job
    runs-on: ubuntu-latest
    name: Performance Monitoring
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_SERVER_URL: ${{ secrets.LHCI_SERVER_URL }}
        LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
