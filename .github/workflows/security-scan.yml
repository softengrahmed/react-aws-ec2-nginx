name: Security Scanning Suite

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - dependencies
        - code
        - secrets
        - infrastructure
      severity_threshold:
        description: 'Minimum severity level to report'
        required: false
        default: 'medium'
        type: choice
        options:
        - low
        - medium
        - high
        - critical

env:
  NODE_VERSION: '18.x'
  SARIF_UPLOAD: true

jobs:
  dependency_scan:
    if: contains(github.event.inputs.scan_type, 'dependencies') || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    # NPM Audit
    - name: NPM Security Audit
      run: |
        echo "Running NPM security audit..."
        npm audit --audit-level=${{ github.event.inputs.severity_threshold || 'medium' }} --json > npm-audit.json || true
        
        # Generate human-readable report
        npm audit --audit-level=${{ github.event.inputs.severity_threshold || 'medium' }} > npm-audit-report.txt || true
        
        echo "NPM Audit Summary:"
        cat npm-audit-report.txt

    # Snyk vulnerability scanning
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=${{ github.event.inputs.severity_threshold || 'medium' }} --file=package.json

    # OSV Scanner for comprehensive vulnerability detection
    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1.7.1
      continue-on-error: true
      with:
        scan-args: |-
          -r
          --skip-git
          ./

    # Upload dependency scan results
    - name: Upload Dependency Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results-${{ github.sha }}
        path: |
          npm-audit.json
          npm-audit-report.txt
          snyk-report.json
        retention-days: 30

  code_security_scan:
    if: contains(github.event.inputs.scan_type, 'code') || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    runs-on: ubuntu-latest
    name: Static Code Security Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Build application
      run: npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

    # ESLint Security Plugin
    - name: Run ESLint Security
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-security-report.json || true
        npx eslint . --ext .js,.jsx,.ts,.tsx || true

    # Semgrep SAST
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      continue-on-error: true
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/react
          p/javascript
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    # Upload SARIF results to GitHub
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        category: semgrep

    # Upload code scan results
    - name: Upload Code Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-security-scan-results-${{ github.sha }}
        path: |
          eslint-security-report.json
          semgrep.sarif
        retention-days: 30

  secrets_scan:
    if: contains(github.event.inputs.scan_type, 'secrets') || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    runs-on: ubuntu-latest
    name: Secrets Detection Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # TruffleHog secrets scanning
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

    # GitLeaks secrets scanning
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    # Custom secrets patterns
    - name: Custom Secrets Scan
      run: |
        echo "Scanning for custom secret patterns..."
        
        # Check for common secret patterns
        patterns=(
          "(password|passwd|pwd)\s*[=:]\s*['\"][^'\"\n]{8,}['\"]" 
          "(api[_-]?key|apikey)\s*[=:]\s*['\"][^'\"\n]{20,}['\"]" 
          "(secret[_-]?key|secretkey)\s*[=:]\s*['\"][^'\"\n]{20,}['\"]" 
          "(access[_-]?token|accesstoken)\s*[=:]\s*['\"][^'\"\n]{20,}['\"]" 
          "(private[_-]?key|privatekey)\s*[=:]\s*['\"][^'\"\n]{20,}['\"]" 
        )
        
        for pattern in "${patterns[@]}"; do
          echo "Checking pattern: $pattern"
          if grep -rEi "$pattern" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "⚠️ Potential secret found with pattern: $pattern"
          fi
        done

  infrastructure_scan:
    if: contains(github.event.inputs.scan_type, 'infrastructure') || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == ''
    runs-on: ubuntu-latest
    name: Infrastructure Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Checkov for infrastructure as code
    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      continue-on-error: true
      with:
        directory: .
        framework: github_actions,dockerfile,secrets
        output_format: sarif
        output_file_path: checkov-report.sarif
        quiet: true
        soft_fail: true

    # Hadolint for Dockerfile security
    - name: Hadolint Dockerfile Scan
      if: hashFiles('**/Dockerfile*') != ''
      uses: hadolint/hadolint-action@v3.1.0
      continue-on-error: true
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-report.sarif

    # Upload infrastructure scan results
    - name: Upload Infrastructure Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-scan-results-${{ github.sha }}
        path: |
          checkov-report.sarif
          hadolint-report.sarif
        retention-days: 30

  security_report:
    needs: [dependency_scan, code_security_scan, secrets_scan, infrastructure_scan]
    if: always()
    runs-on: ubuntu-latest
    name: Security Report Generation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all scan results
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        path: scan-results

    - name: Generate Security Report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "Branch: ${{ github.ref_name }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Results Summary" >> security-report.md
        echo "" >> security-report.md
        
        # Check each scan result
        for job in dependency_scan code_security_scan secrets_scan infrastructure_scan; do
          echo "### $job" >> security-report.md
          if [ "${{ needs.$job.result }}" == "success" ]; then
            echo "✅ Passed" >> security-report.md
          elif [ "${{ needs.$job.result }}" == "failure" ]; then
            echo "❌ Failed" >> security-report.md
          else
            echo "⚠️ ${{ needs.$job.result }}" >> security-report.md
          fi
          echo "" >> security-report.md
        done
        
        echo "## Recommendations" >> security-report.md
        echo "" >> security-report.md
        echo "- Review all failed security checks" >> security-report.md
        echo "- Update dependencies with known vulnerabilities" >> security-report.md
        echo "- Address code security issues identified by static analysis" >> security-report.md
        echo "- Ensure no secrets are committed to the repository" >> security-report.md
        echo "- Follow security best practices for infrastructure configuration" >> security-report.md

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.sha }}
        path: security-report.md
        retention-days: 90

    # Comment on PR with security report
    - name: Comment PR with Security Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## 🔒 Security Scan Report\n\n' + report
          });

    # Notify teams about security issues
    - name: Notify Security Issues
      if: contains(needs.*.result, 'failure')
      run: |
        chmod +x scripts/notify-teams.sh
        ./scripts/notify-teams.sh "security_alert" "${{ github.ref_name }}" "Security vulnerabilities detected in commit ${{ github.sha }}"
